from Classifier.rf import RandomForestMalware as RFM
from FeatureExtract.extract import analyze
import sys
import os
import numpy as np
import logging
LOG = logging.getLogger()


TRAIN_FILE_X = './Data/d0_trX.npy'
TRAIN_FILE_Y = './Data/d0_trY.npy'
TEST_FILE_X = './Data/d0_tsX.npy'
TEST_FILE_Y = './Data/d0_tsY.npy'
LOG_FILE = "new_malware.log"

print "Build RandomForestMalware.. "
rfm = RFM()
rfm.train(TRAIN_FILE_X, TRAIN_FILE_Y)
rfm.test(TEST_FILE_X, TEST_FILE_Y)
print "Build Success!"


def predict_from_files(path):
    files = []
    pre_count = [0, 0]
    for parent, dirname, filenames in os.walk(path):
        for filename in filenames:
            files.append(os.path.join(parent, filename))
    for filename in files:
        # extract
        print "-----------------------------"
        print "File: ", filename
        app_feature = None
        try:
            app_feature = analyze(filename)
        except Exception as e:
            print "Exception: ", str(e)
        # tranform to numpy.array()
        print "length of  app_feature: ", len(app_feature)
        pre_x = np.array(app_feature)
        pre_y = int(rfm.predict(pre_x))
        print "Predict is ", pre_y
        pre_count[pre_y] += 1
        print "pre_count: ", pre_count

        f = open(LOG_FILE, "a")
        f.write("%s %d\n" % (filename, pre_y))
        f.close()


# predict_from_files(sys.argv[1])

def main(app_path):
    print "-------------------"
    print "Analyze App: ", app_path
    app_feature = None
    try:
        app_feature = analyze(app_path)
    except Exception as e:
        print "When Analyze app, have an Exception: ", str(e)
    # Begin Predict with RandomForestMalware
    pre_x = np.array(app_feature)
    pre_y = int(rfm.predict(pre_x))
    # Malware or not Malware
    print "The app: ", app_path
    if pre_y == 1:
        print "    is a Malware."
    else:
        print "    is a normal APP."



if __name__ == '__main__':
    app_path = sys.argv[1]
    main(app_path)
